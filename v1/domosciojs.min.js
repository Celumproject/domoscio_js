/* DomoscioJS v1.0.1 (Custom Build)
 * Dependencies : jQuery (https://jquery.com/)
 * Build: https://domoscio.com/ | https://github.com/Celumproject/domoscio_js
 */

if ("undefined" == typeof jQuery)
    throw new Error("DomoscioJS requires jQuery");

function errors(e = "token") { var t = ""; switch (e) { case "token": default: t = "Invalid API Token" }return t } function http_calls(e = "") { var t = 1 == DomoscioJS.configuration.preproduction ? DomoscioJS.configuration.version > 1 ? "https://domoscio-stats-engine2-preprod.herokuapp.com" : "http://stats-engine.domoscio.com" : "http://localhost:3001/", i = DomoscioJS.configuration.version, n = DomoscioJS.configuration.client_id, o = DomoscioJS.authorization_token(DomoscioJS.configuration.client_passphrase); if (0 == o) return o; return t + "/v" + i + "/instances/" + n + "/" + e } function ressource(e) { if ("string" != typeof e) { var t = (e = e.toString()).indexOf(" "); t = (e = e.substring(t + 1)).indexOf("("), e = e.substring(0, t) } array = e.split(/(?=[A-Z])/); var n = ""; for (i = 0; i < array.length; i++)i < array.length - 1 ? n += array[i] + "_" : n += array[i]; var o = ""; return o += n.toLowerCase() + "s" } function fetch(e = {}) { var t = ressource(this.child.parent.name), i = DomoscioJS.authorization_token(DomoscioJS.configuration.client_passphrase), n = http_calls(t); if (!1 !== n) { var o = ""; Object.keys(e).map(function (t, i) { o += 0 == i ? t + "=" + e[t] : "&" + t + "=" + e[t] }); var r = ""; return $.ajax({ headers: { Authorization: "Token token=" + i }, method: "GET", url: n, data: o, async: !1, dataType: "json", crossDomain: !0, complete: function (e, t) { r = JSON.parse(e.responseText); var s = Math.ceil(parseInt(e.getResponseHeader("total")) / parseInt(e.getResponseHeader("per-page"))); if (s >= 2) for (var a = 2; a <= s; a++)$.ajax({ headers: { Authorization: "Token token=" + i }, method: "GET", url: n, data: o + "&page=" + a, async: !1, dataType: "json", crossDomain: !0, complete: function (e, t) { r = r.concat(JSON.parse(e.responseText)) } }) }, error: function (e, t) { console.error("We're sorry, but something went wrong. (500)") } }), r } } function find(e = {}) { var t = ressource(this.child.parent.name), i = DomoscioJS.authorization_token(DomoscioJS.configuration.client_passphrase), n = ""; if ("id" in e) { n = e.id; var o = http_calls(t) + "/" + n; if (!1 !== o) { var r = ""; return $.ajax({ headers: { Authorization: "Token token=" + i }, method: "GET", url: o, async: !1, dataType: "json", crossDomain: !0, complete: function (e, t) { r = JSON.parse(e.responseText) }, error: function (e, t) { console.error("We're sorry, but something went wrong. (500)") } }), r } } else console.error("We're sorry, but something went wrong. (500)") } function create(e = {}) { var t = ressource(this.child.parent.name), i = DomoscioJS.authorization_token(DomoscioJS.configuration.client_passphrase), n = http_calls(t); if (!1 !== n) { var o = ""; return $.ajax({ headers: { Authorization: "Token token=" + i }, method: "POST", url: n, data: e, async: !1, dataType: "json", crossDomain: !0, complete: function (t, i) { console.log(JSON.stringify(e)), o = JSON.parse(t.responseText) }, error: function (e, t) { console.error("We're sorry, but something went wrong. (500)") } }), o } } function util(e, t = {}) { var i = ressource(this.child.parent.name), n = DomoscioJS.authorization_token(DomoscioJS.configuration.client_passphrase), o = http_calls(i) + "/" + e; if (!1 !== o) { var r = ""; Object.keys(t).map(function (e, i) { r += 0 == i ? e + "=" + t[e] : "&" + e + "=" + t[e] }); var s = ""; return $.ajax({ headers: { Authorization: "Token token=" + n }, method: "GET", url: o, data: r, async: !1, dataType: "json", crossDomain: !0, complete: function (e, t) { s = JSON.parse(e.responseText) }, error: function (e, t) { console.error("We're sorry, but something went wrong. (500)") } }), s } } if ("undefined" == typeof jQuery) throw new Error("DomoscioJS requires jQuery"); let Student = { name: "Student", child: {}, fetch: fetch, find: find, create: create, init: function () { return this.child.parent = this, delete this.init, this } }.init(), Objective = { name: "Objective", child: {}, fetch: fetch, find: find, create: create, init: function () { return this.child.parent = this, delete this.init, this } }.init(), KnowledgeNode = { name: "KnowledgeNode", child: {}, fetch: fetch, find: find, create: create, init: function () { return this.child.parent = this, delete this.init, this } }.init(), KnowledgeNodeStudent = { name: "KnowledgeNodeStudent", child: {}, fetch: fetch, find: find, create: create, init: function () { return this.child.parent = this, delete this.init, this } }.init(), KnowledgeNodeContent = { name: "KnowledgeNodeContent", child: {}, fetch: fetch, find: find, create: create, init: function () { return this.child.parent = this, delete this.init, this } }.init(), Event = { name: "Event", child: {}, fetch: fetch, find: find, create: create, init: function () { return this.child.parent = this, delete this.init, this } }.init(), Session = { name: "Session", child: {}, fetch: fetch, init: function () { return this.child.parent = this, delete this.init, this } }.init(), Content = { name: "Content", child: {}, fetch: fetch, find: find, create: create, init: function () { return this.child.parent = this, delete this.init, this } }.init(), GameplayUtil = { name: "GameplayUtil", child: {}, util: util, init: function () { return this.child.parent = this, delete this.init, this } }.init(), ReviewUtil = { name: "ReviewUtil", child: {}, util: util, init: function () { return this.child.parent = this, delete this.init, this } }.init(), RecommendationUtil = { name: "RecommendationUtil", child: {}, util: util, init: function () { return this.child.parent = this, delete this.init, this } }.init(); DomoscioJS = { configuration: { preproduction: !0, version: 2, client_id: 0, client_passphrase: "" }, authorization_token: function (e) { return null == e ? (console.error(JSON.stringify(errors())), !1) : e }, Student: Student, Objective: Objective, KnowledgeNode: KnowledgeNode, KnowledgeNodeStudent: KnowledgeNodeStudent, KnowledgeNodeContent: KnowledgeNodeContent, Event: Event, Session: Session, Content: Content, GameplayUtil: GameplayUtil, ReviewUtil: ReviewUtil, RecommendationUtil: RecommendationUtil };